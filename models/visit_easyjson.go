// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE564fc13DecodeHighloadModels(in *jlexer.Lexer, out *Visits) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "visits":
			if in.IsNull() {
				in.Skip()
				out.Visits = nil
			} else {
				in.Delim('[')
				if out.Visits == nil {
					if !in.IsDelim(']') {
						out.Visits = make([]*Visit, 0, 8)
					} else {
						out.Visits = []*Visit{}
					}
				} else {
					out.Visits = (out.Visits)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Visit
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Visit)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Visits = append(out.Visits, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE564fc13EncodeHighloadModels(out *jwriter.Writer, in Visits) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visits\":")
	if in.Visits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Visits {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Visits) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE564fc13EncodeHighloadModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Visits) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE564fc13EncodeHighloadModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Visits) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE564fc13DecodeHighloadModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Visits) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE564fc13DecodeHighloadModels(l, v)
}
func easyjsonE564fc13DecodeHighloadModels1(in *jlexer.Lexer, out *VisitAvg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avg":
			out.Avg = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE564fc13EncodeHighloadModels1(out *jwriter.Writer, in VisitAvg) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"avg\":")
	out.Float32(float32(in.Avg))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VisitAvg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE564fc13EncodeHighloadModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VisitAvg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE564fc13EncodeHighloadModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VisitAvg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE564fc13DecodeHighloadModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VisitAvg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE564fc13DecodeHighloadModels1(l, v)
}
func easyjsonE564fc13DecodeHighloadModels2(in *jlexer.Lexer, out *Visit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int32(in.Int32())
		case "location":
			out.LocationID = int32(in.Int32())
		case "user":
			out.UserID = int32(in.Int32())
		case "visited_at":
			out.VisitedAt = int(in.Int())
		case "mark":
			out.Mark = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE564fc13EncodeHighloadModels2(out *jwriter.Writer, in Visit) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Int32(int32(in.ID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"location\":")
	out.Int32(int32(in.LocationID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user\":")
	out.Int32(int32(in.UserID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visited_at\":")
	out.Int(int(in.VisitedAt))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mark\":")
	out.Uint8(uint8(in.Mark))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Visit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE564fc13EncodeHighloadModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Visit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE564fc13EncodeHighloadModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Visit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE564fc13DecodeHighloadModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Visit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE564fc13DecodeHighloadModels2(l, v)
}
func easyjsonE564fc13DecodeHighloadModels3(in *jlexer.Lexer, out *UserVisitsSl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "visits":
			if in.IsNull() {
				in.Skip()
				out.Visits = nil
			} else {
				in.Delim('[')
				if out.Visits == nil {
					if !in.IsDelim(']') {
						out.Visits = make([]UserVisit, 0, 2)
					} else {
						out.Visits = []UserVisit{}
					}
				} else {
					out.Visits = (out.Visits)[:0]
				}
				for !in.IsDelim(']') {
					var v4 UserVisit
					(v4).UnmarshalEasyJSON(in)
					out.Visits = append(out.Visits, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE564fc13EncodeHighloadModels3(out *jwriter.Writer, in UserVisitsSl) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visits\":")
	if in.Visits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in.Visits {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserVisitsSl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE564fc13EncodeHighloadModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserVisitsSl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE564fc13EncodeHighloadModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserVisitsSl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE564fc13DecodeHighloadModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserVisitsSl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE564fc13DecodeHighloadModels3(l, v)
}
func easyjsonE564fc13DecodeHighloadModels4(in *jlexer.Lexer, out *UserVisits) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Visit":
			if in.IsNull() {
				in.Skip()
				out.Visit = nil
			} else {
				if out.Visit == nil {
					out.Visit = new(Visit)
				}
				(*out.Visit).UnmarshalEasyJSON(in)
			}
		case "Location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(Location)
				}
				easyjsonE564fc13DecodeHighloadModels5(in, &*out.Location)
			}
		case "User":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				easyjsonE564fc13DecodeHighloadModels6(in, &*out.User)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE564fc13EncodeHighloadModels4(out *jwriter.Writer, in UserVisits) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Visit\":")
	if in.Visit == nil {
		out.RawString("null")
	} else {
		(*in.Visit).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Location\":")
	if in.Location == nil {
		out.RawString("null")
	} else {
		easyjsonE564fc13EncodeHighloadModels5(out, *in.Location)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"User\":")
	if in.User == nil {
		out.RawString("null")
	} else {
		easyjsonE564fc13EncodeHighloadModels6(out, *in.User)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserVisits) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE564fc13EncodeHighloadModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserVisits) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE564fc13EncodeHighloadModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserVisits) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE564fc13DecodeHighloadModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserVisits) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE564fc13DecodeHighloadModels4(l, v)
}
func easyjsonE564fc13DecodeHighloadModels6(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int32(in.Int32())
		case "email":
			out.Email = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "gender":
			out.Gender = string(in.String())
		case "birth_date":
			out.BirthDate = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE564fc13EncodeHighloadModels6(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int32(int32(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"email\":")
	out.String(string(in.Email))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"first_name\":")
	out.String(string(in.FirstName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"last_name\":")
	out.String(string(in.LastName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gender\":")
	out.String(string(in.Gender))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"birth_date\":")
	out.Int(int(in.BirthDate))
	out.RawByte('}')
}
func easyjsonE564fc13DecodeHighloadModels5(in *jlexer.Lexer, out *Location) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int32(in.Int32())
		case "place":
			out.Place = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "city":
			out.City = string(in.String())
		case "distance":
			out.Distance = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE564fc13EncodeHighloadModels5(out *jwriter.Writer, in Location) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int32(int32(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"place\":")
	out.String(string(in.Place))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"country\":")
	out.String(string(in.Country))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"city\":")
	out.String(string(in.City))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"distance\":")
	out.Int32(int32(in.Distance))
	out.RawByte('}')
}
func easyjsonE564fc13DecodeHighloadModels7(in *jlexer.Lexer, out *UserVisit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mark":
			out.Mark = uint8(in.Uint8())
		case "visited_at":
			out.VisitedAt = int(in.Int())
		case "place":
			out.Place = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE564fc13EncodeHighloadModels7(out *jwriter.Writer, in UserVisit) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mark\":")
	out.Uint8(uint8(in.Mark))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"visited_at\":")
	out.Int(int(in.VisitedAt))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"place\":")
	out.String(string(in.Place))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserVisit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE564fc13EncodeHighloadModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserVisit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE564fc13EncodeHighloadModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserVisit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE564fc13DecodeHighloadModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserVisit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE564fc13DecodeHighloadModels7(l, v)
}
func easyjsonE564fc13DecodeHighloadModels8(in *jlexer.Lexer, out *LocationVisits) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Visit":
			if in.IsNull() {
				in.Skip()
				out.Visit = nil
			} else {
				if out.Visit == nil {
					out.Visit = new(Visit)
				}
				(*out.Visit).UnmarshalEasyJSON(in)
			}
		case "Location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(Location)
				}
				easyjsonE564fc13DecodeHighloadModels5(in, &*out.Location)
			}
		case "User":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				easyjsonE564fc13DecodeHighloadModels6(in, &*out.User)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE564fc13EncodeHighloadModels8(out *jwriter.Writer, in LocationVisits) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Visit\":")
	if in.Visit == nil {
		out.RawString("null")
	} else {
		(*in.Visit).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Location\":")
	if in.Location == nil {
		out.RawString("null")
	} else {
		easyjsonE564fc13EncodeHighloadModels5(out, *in.Location)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"User\":")
	if in.User == nil {
		out.RawString("null")
	} else {
		easyjsonE564fc13EncodeHighloadModels6(out, *in.User)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocationVisits) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE564fc13EncodeHighloadModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocationVisits) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE564fc13EncodeHighloadModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocationVisits) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE564fc13DecodeHighloadModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocationVisits) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE564fc13DecodeHighloadModels8(l, v)
}
